=== Lecture de l'automate depuis le fichier automate/automate12.txt ===
Alphabet: ['a', 'b', 'c', 'd']
États: [0, 1]
États initiaux: [1]
États terminaux: [1]
Transitions:
1 --a--> {1}
1 --c--> {0}
0 --d--> {1}
0 --b--> {0}

=== Vérification des propriétés de l'automate ===
Cet automate est déterministe
Déterministe : True
Il y'a des transitions qui mènent à l'état initial de cet automate, il n'est pas standard
Standard : False
L'automate est incomplet car les états suivants sont sans transitions : [(0, 'a'), (0, 'c'), (1, 'b'), (1, 'd')]
Complet : False

=== Standardisation de l'automate ===
Il y'a des transitions qui mènent à l'état initial de cet automate, il n'est pas standard
Il y'a des transitions qui mènent à l'état initial de cet automate, il n'est pas standard
Création de l'automate standard : 
Alphabet: ['a', 'b', 'c', 'd']
États: [0, 1, 2]
États initiaux: [2]
États terminaux: [1, 2]
Transitions:
1 --a--> {1}
1 --c--> {0}
0 --d--> {1}
0 --b--> {0}
2 --a--> {1}
2 --c--> {0}

=== Déterminisation et complétion de l'automate ===

Début de la déterminisation et de la complétion...
L'automate ne contient pas de transitions epsilon. Utilisation de determiniser_automate.
Cet automate est déterministe
L'automate est déjà déterministe
Automate déterminisé :
Alphabet: ['a', 'b', 'c', 'd']
États: [0, 1]
États initiaux: [1]
États terminaux: [1]
Transitions:
1 --a--> {1}
1 --c--> {0}
0 --d--> {1}
0 --b--> {0}

Complétion en cours...
Cet automate est déterministe
L'automate est incomplet car les états suivants sont sans transitions : [(0, 'a'), (0, 'c'), (1, 'b'), (1, 'd')]
Début de la complétion...
➕ Transition ajoutée : 0 --(a)--> 2
➕ Transition ajoutée : 0 --(c)--> 2
➕ Transition ajoutée : 1 --(b)--> 2
➕ Transition ajoutée : 1 --(d)--> 2
Automate déterminisé et complet :
Alphabet: ['a', 'b', 'c', 'd']
États: {0, 1}
États initiaux: [1]
États terminaux: [1]
Transitions:
1 --a--> {1}
1 --c--> {0}
0 --d--> {1}
0 --b--> {0}
0 --a--> 2
0 --c--> 2
1 --b--> 2
1 --d--> 2
2 --a--> 2
2 --b--> 2
2 --c--> 2
2 --d--> 2

=== Reconnaissance de mots avec l'automate déterministe et complet ===

Test du mot : 
✅ Le mot '' est accepté.

Test du mot : a
✅ Le mot 'a' est accepté.

Test du mot : b
❌ Le mot 'b' est rejeté (état final 2 non terminal).

Test du mot : c
❌ Le mot 'c' est rejeté (état final 0 non terminal).

Test du mot : d
❌ Le mot 'd' est rejeté (état final 2 non terminal).

Test du mot : abbcd
❌ Le mot 'abbcd' est rejeté (état final 2 non terminal).

Test du mot : accccccd
❌ Le mot 'accccccd' est rejeté (état final 2 non terminal).

Test du mot : e
❌ Symbole 'e' non reconnu dans l'alphabet de l'automate.

Test du mot : f
❌ Symbole 'f' non reconnu dans l'alphabet de l'automate.

Test du mot : aaaaa
✅ Le mot 'aaaaa' est accepté.

Test du mot : ababa
❌ Le mot 'ababa' est rejeté (état final 2 non terminal).

Test du mot : acbd
✅ Le mot 'acbd' est accepté.

Test du mot : acbbbbbd
✅ Le mot 'acbbbbbd' est accepté.

Test du mot : ccbdadb
❌ Le mot 'ccbdadb' est rejeté (état final 2 non terminal).

Test du mot : abaaa
❌ Le mot 'abaaa' est rejeté (état final 2 non terminal).

Test du mot : abcd
❌ Le mot 'abcd' est rejeté (état final 2 non terminal).

Test du mot : aaaba
❌ Le mot 'aaaba' est rejeté (état final 2 non terminal).

Test du mot : ba
❌ Le mot 'ba' est rejeté (état final 2 non terminal).

Test du mot : aab
❌ Le mot 'aab' est rejeté (état final 2 non terminal).

Test du mot : aaaaaaaaaaaa
✅ Le mot 'aaaaaaaaaaaa' est accepté.

Test du mot : ababababaaab
❌ Le mot 'ababababaaab' est rejeté (état final 2 non terminal).

Test du mot : aba
❌ Le mot 'aba' est rejeté (état final 2 non terminal).

Test du mot : bbbb
❌ Le mot 'bbbb' est rejeté (état final 2 non terminal).

Test du mot : bbaababend
❌ Symbole 'e' non reconnu dans l'alphabet de l'automate.

=== Création de l'automate complémentaire ===
Complémentarisation:
Cet automate est déterministe
L'automate est déjà déterministe
Cet automate est déterministe
création de l'automate complémentaire : 
Alphabet: ['a', 'b', 'c', 'd']
États: {0, 1}
États initiaux: [1]
États terminaux: {0}
Transitions:
1 --a--> {1}
1 --c--> {0}
0 --d--> {1}
0 --b--> {0}
0 --a--> 2
0 --c--> 2
1 --b--> 2
1 --d--> 2
2 --a--> 2
2 --b--> 2
2 --c--> 2
2 --d--> 2
